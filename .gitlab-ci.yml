stages:
  - build
  - image
  - chart

# ------------------------ folio-fe
build folio-fe:
  stage: build
  image: node:lts-alpine
  script:
    - cd folio-fe
    - yarn install
    - yarn build
  artifacts:
    paths:
      - folio-fe/.next/

image dev folio-fe:
  stage: image
  image: docker:stable-git
  needs: ["build folio-fe"]
  environment:
    name: development-fe
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
    DOCKER_CLI_EXPERIMENTAL: enabled
    DOCKER_BUILDKIT: 1
  services:
    - name: docker:dind
      command: ["--experimental"] 
  before_script:
    - docker build --platform=local -o . git://github.com/docker/buildx
    - mv buildx ~/.docker/cli-plugins/docker-buildx
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    - cd folio-fe
    - docker buildx create --use
    - docker buildx --platform linux/amd64,linux/arm64 -t $CI_REGISTRY_IMAGE:fe-dev .
  when: manual
  only:
    - branches
  except:
    - main

image prod folio-fe:
  stage: image
  image: docker:stable-git
  needs: ["build folio-fe"]
  environment:
    name: production-fe
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
    DOCKER_CLI_EXPERIMENTAL: enabled
    DOCKER_BUILDKIT: 1
  services:
    - name: docker:dind
      command: ["--experimental"] 
  before_script:
    - docker build --platform=local -o . git://github.com/docker/buildx
    - mv buildx ~/.docker/cli-plugins/docker-buildx
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    - cd folio-fe
    - docker buildx create --use
    - docker buildx --platform linux/amd64,linux/arm64 -t $CI_REGISTRY_IMAGE:fe -t $CI_REGISTRY_IMAGE:fe-$CI_COMMIT_TAG .
  when: on_success
  only:
    - tags

chart dev folio:
  stage: chart
  image: daystram/k8s-tools:latest
  needs: ["image dev folio-fe"]
  variables:
    APPLICATION_NAME: "folio"
    APPLICATION_VERSION: "v0.0.0-development"
  before_script:
    - git config --global user.name "$BOTDAYSTRAM_NAME"
    - git config --global user.email "$BOTDAYSTRAM_EMAIL"
    - mkdir -p ~/.ssh && eval `ssh-agent -s` && ssh-keyscan github.com >> ~/.ssh/known_hosts
    - cat $BOTDAYSTRAM_KEY_FILE | ssh-add -
    - cat $KUBECONFIG_FILE > $KUBECONFIG && chmod 700 $KUBECONFIG
  script:
    - git clone git@github.com:daystram/helm-charts.git
    - cp -r .daystram helm-charts/docs/
    - cd helm-charts/docs/
    - curl -sfL https://charts.daystram.com/build.sh | sh -s - $APPLICATION_NAME $APPLICATION_VERSION
    - rm -rf .daystram/
    - git add .
    - 'git commit -m "feat: added chart for ${APPLICATION_NAME}@${APPLICATION_VERSION}"'
    - git push
  when: on_success
  only:
    - branches
  except:
    - main

chart prod folio:
  stage: chart
  image: daystram/k8s-tools:latest
  needs: ["image prod folio-fe"]
  variables:
    APPLICATION_NAME: "folio"
    APPLICATION_VERSION: "$CI_COMMIT_TAG"
  before_script:
    - git config --global user.name "$BOTDAYSTRAM_NAME"
    - git config --global user.email "$BOTDAYSTRAM_EMAIL"
    - mkdir -p ~/.ssh && eval `ssh-agent -s` && ssh-keyscan github.com >> ~/.ssh/known_hosts
    - cat $BOTDAYSTRAM_KEY_FILE | ssh-add -
    - cat $KUBECONFIG_FILE > $KUBECONFIG && chmod 700 $KUBECONFIG
  script:
    - git clone git@github.com:daystram/helm-charts.git
    - cp -r .daystram helm-charts/docs/
    - cd helm-charts/docs/
    - curl -sfL https://charts.daystram.com/build.sh | sh -s - $APPLICATION_NAME $APPLICATION_VERSION
    - rm -rf .daystram/
    - git add .
    - 'git commit -m "feat: added chart for ${APPLICATION_NAME}@${APPLICATION_VERSION}"'
    - git push
  when: on_success
  only:
    - tags
